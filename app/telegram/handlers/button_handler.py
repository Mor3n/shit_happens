# app/telegram/handlers/button_handler.py

from telegram import Update
from telegram.ext import ContextTypes

from app.services.digest_service import generate_digest
from app.telegram.handlers.feed_handler import feed
from app.telegram.handlers.digest_handler import digest
from app.telegram.handlers.settings_handler import settings
from app.telegram.handlers.stats_handler import stats
from app.telegram.handlers.start_handler import start
from app.telegram.helpers import safe_reply, build_pagination_buttons
from app.services.feed_service import get_feed
from app.services.reaction_service import add_reaction

# –ö–ª—é—á–µ–≤–∞—è –ø—Ä–∞–≤–∫–∞: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º pending_confess, —á—Ç–æ–±—ã –ø–æ–º–µ—á–∞—Ç—å —é–∑–µ—Ä–∞
from app.telegram.handlers.confess_handler import pending_confess


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = str(update.effective_user.id)

    if data == "refresh_digest":
        text = generate_digest(user_id)
        await query.edit_message_text(
            text=text,
            reply_markup=query.message.reply_markup,
        )

    elif data == "goto_confess":
        # –í–ê–ñ–ù–û: —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø–æ–≤–µ–¥–∏ –¥–ª—è —é–∑–µ—Ä–∞
        pending_confess.add(user_id)
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫—É –≤ confess_handler (—Å–∏–º–≤–æ–ª—ã, –Ω–µ —Å–ª–æ–≤–∞)
        await safe_reply(update, context, "üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏—Å–ø–æ–≤–µ–¥—å (20‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤):")

    elif data == "goto_feed":
        await feed(update, context)

    elif data == "goto_digest":
        await digest(update, context)

    elif data == "goto_settings":
        await settings(update, context)

    elif data == "goto_stats":
        await stats(update, context)

    elif data == "goto_start":
        await start(update, context)

    elif data.startswith("page:"):
        try:
            page = int(data.split(":")[1])
            posts = get_feed(page)
            texts = [p.get("text") for p in posts if p.get("text")]
            text = "\n\n".join(texts) if texts else "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤."
            markup = build_pagination_buttons(page)
            await query.edit_message_text(text=text, reply_markup=markup)
        except Exception:
            await safe_reply(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

    elif data.startswith("react:"):
        try:
            _, post_id, reaction = data.split(":", 2)
            add_reaction(int(post_id), reaction)
            await query.answer(f"–†–µ–∞–∫—Ü–∏—è —É—á—Ç–µ–Ω–∞: {reaction}")
        except Exception:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏.")

    else:
        await safe_reply(update, context, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏.")
