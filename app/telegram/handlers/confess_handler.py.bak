# app/telegram/handlers/confess_handler.py
from telegram import Update
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

from app.services.confess_service import save_confession
from app.services.settings_service import get_settings
from app.telegram.helpers import safe_reply
from app.services.ai_context import build_context
from app.ai.prompts import system_prompt, developer_prompt
from app.ai.client import AIClient
from config.config import Config  # ‚úÖ —Ñ–∏–∫—Å –∏–º–ø–æ—Ä—Ç–∞
from app import app
from app.db import get_db

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (in-memory)
pending_confess: set[str] = set()


async def confess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /confess ‚Äî —Å—Ç–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∏—Å–ø–æ–≤–µ–¥–∏."""
    user_id = str(update.effective_user.id)
    pending_confess.add(user_id)
    await safe_reply(update, context, "üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏—Å–ø–æ–≤–µ–¥—å (20‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤):")


async def handle_confession_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≤–∏–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —é–∑–µ—Ä –≤ pending_confess."""
    if not update or not getattr(update, "message", None) or not update.message.text:
        return

    user_id = str(update.effective_user.id)
    if user_id not in pending_confess:
        return

    text = update.message.text.strip()
    if len(text) < 20 or len(text) > 50:
        await safe_reply(update, context, "‚ö†Ô∏è –ò—Å–ø–æ–≤–µ–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 20 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    try:
        post = save_confession(user_id, text)
        await safe_reply(update, context, "üôè –ò—Å–ø–æ–≤–µ–¥—å –ø—Ä–∏–Ω—è—Ç–∞.")

        # --- –ò–ò-–æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å–ø–æ–≤–µ–¥—å ---
        if getattr(Config, "USE_AI_CONFESS_REPLY", False):
            try:
                with app.app_context():
                    db = get_db()
                    settings = get_settings(user_id)
                    ctx = build_context(db, user_id=user_id, history_limit=3)
                    ctx["post"] = post.to_dict()
                    ctx["settings"] = settings

                client = AIClient()
                sys_p = system_prompt(settings)
                dev_p = developer_prompt(tone=Config.AI_TONE, max_len=Config.AI_MAX_LEN)
                ai_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–≤–µ–¥–∞–ª—Å—è:\n\n{post.text}\n\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∂–∏–≤–æ–π –æ—Ç–∫–ª–∏–∫ –≤ —Å—Ç–∏–ª–µ Copilot."

                import asyncio
                loop = asyncio.get_running_loop()
                res = await loop.run_in_executor(None, lambda: client.generate(sys_p, dev_p, ai_text, ctx))

                reply_text = (res.text or "").strip()
                if reply_text:
                    await safe_reply(update, context, reply_text)
            except Exception:
                pass  # –Ω–µ –≤–∞–ª–∏–º —Ö–µ–Ω–¥–ª–µ—Ä, –µ—Å–ª–∏ –ò–ò –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª

    except Exception:
        await safe_reply(update, context, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
    finally:
        pending_confess.discard(user_id)


# --- –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è dispatcher ---
command_handler = CommandHandler("confess", confess)
text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confession_text)

__all__ = ["command_handler", "text_handler"]
