versions pytest-8.2.1, python-3.13.5.final.0
invocation_dir=C:\Users\Mad_Dog\Desktop\shit_happens
cwd=C:\Users\Mad_Dog\Desktop\shit_happens
args=('-vv', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x000002052DCD5940>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x000002052DCD5940>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002052F8396A0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x00000205313070E0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
    early skip of rewriting module: rlcompleter [assertion]
    early skip of rewriting module: readline [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
          plugin_name: 2221264826592
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000002052DCD5940>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\anyio\\pytest_plugin.py'>
          plugin_name: anyio
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py'>
          plugin_name: asyncio
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=9 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x000002052F83B0E0>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=11 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x00000205301082D0>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=7 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'tests.conftest' from 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\conftest.py'>
          plugin_name: C:\Users\Mad_Dog\Desktop\shit_happens\tests\conftest.py
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002052F8396A0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x00000205313070E0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000002053141C590>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000002053141CAD0>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
          plugin_name: 2221264826592
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000002052DCD5940>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\anyio\\pytest_plugin.py'>
          plugin_name: anyio
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py'>
          plugin_name: asyncio
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=9 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x000002052F83B0E0>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=11 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x00000205301082D0>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=7 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'tests.conftest' from 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\conftest.py'>
          plugin_name: C:\Users\Mad_Dog\Desktop\shit_happens\tests\conftest.py
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002052F8396A0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x00000205313070E0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000002053141C590>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000002053141CAD0>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x000002053141D400>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x000002052DB370E0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x000002052DCD5940>
          start_path: C:\Users\Mad_Dog\Desktop\shit_happens
          startdir: C:\Users\Mad_Dog\Desktop\shit_happens
      early skip of rewriting module: importlib.metadata._adapters [assertion]
      early skip of rewriting module: importlib.metadata._text [assertion]
      finish pytest_report_header --> [['asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function'], ['rootdir: C:\\Users\\Mad_Dog\\Desktop\\shit_happens', 'configfile: pytest.ini', 'testpaths: tests', 'plugins: anyio-4.10.0, asyncio-1.1.0'], 'cachedir: .pytest_cache', ['using: pytest-8.2.1', 'setuptools registered plugins:', '  anyio-4.10.0 at C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\anyio\\pytest_plugin.py', '  pytest-asyncio-1.1.0 at C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=WindowsPath('C:/Users/Mad_Dog/Desktop/shit_happens/tests'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: C:\Users\Mad_Dog\Desktop\shit_happens
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Dir shit_happens> [hook]
            pytest_collectstart [hook]
                collector: <Dir shit_happens>
            finish pytest_collectstart --> [] [hook]
            pytest_make_collect_report [hook]
                collector: <Dir shit_happens>
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\.dockerignore
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.dockerignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\.dockerignore
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.dockerignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\.env
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.env
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\.env
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.env
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\.env.example
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.env.example
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\.env.example
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.env.example
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\.git
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.git
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\.gitignore
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.gitignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\.gitignore
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.gitignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\.pytest_cache
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.pytest_cache
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\.python-version
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.python-version
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\.python-version
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.python-version
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\.schema
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.schema
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\.schema
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\.schema
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\Makefile
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\Makefile
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\Makefile
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\Makefile
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\README.md
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\README.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\README.md
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\README.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\__pycache__
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\__pycache__
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Dir alembic> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic.ini
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic.ini
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic.ini
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic.ini
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic_env
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic_env
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\alembic_env
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package alembic_env> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\app
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\app
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\app
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package app> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\config
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\config
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\config
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package config> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\copilot_dump
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\copilot_dump
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\copilot_dump
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package copilot_dump> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\data
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\data
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\data
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package data> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\digest_cache
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\digest_cache
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\digest_cache
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package digest_cache> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\dump
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\dump
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\dump
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package dump> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\gunicorn.conf.py
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\gunicorn.conf.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\gunicorn.conf.py
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\gunicorn.conf.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\instance
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\instance
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\instance
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Dir instance> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\logs
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\logs
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\logs
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package logs> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\manifest.json
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\manifest.json
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\manifest.json
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\manifest.json
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\migrations
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\migrations
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\migrations
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package migrations> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\pytest.ini
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\pytest.ini
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\pytest.ini
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\pytest.ini
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\pytestdebug.log
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\pytestdebug.log
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\pytestdebug.log
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\pytestdebug.log
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\ref.py
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\ref.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\ref.py
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\ref.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\render.yaml
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\render.yaml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\render.yaml
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\render.yaml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\requirements.txt
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\requirements.txt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\requirements.txt
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\requirements.txt
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\run.py
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\run.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\run.py
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\run.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\runtime.txt
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\runtime.txt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\runtime.txt
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\runtime.txt
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\scheduler.py
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\scheduler.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\scheduler.py
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\scheduler.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\start.sh
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\start.sh
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\start.sh
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\start.sh
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\s полная перезапись
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\s полная перезапись
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir shit_happens>
                  file_path: C:\Users\Mad_Dog\Desktop\shit_happens\s полная перезапись
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\s полная перезапись
              finish pytest_collect_file --> [] [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\tests
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package tests> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tg-bot-webhook
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\tg-bot-webhook
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\tg-bot-webhook
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package tg-bot-webhook> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tools
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\tools
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\tools
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package tools> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\venv
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\venv
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002052DCD5940>
                  collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\version
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\version
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\Mad_Dog\Desktop\shit_happens\version
                  parent: <Dir shit_happens>
              finish pytest_collect_directory --> <Package version> [hook]
            finish pytest_make_collect_report --> <CollectReport '.' lenresult=15 outcome='passed'> [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package tests> [collection]
      pytest_collectstart [hook]
          collector: <Package tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tests>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\__init__.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\__init__.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\__pycache__
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\conftest.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\conftest.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\conftest.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\conftest.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache
            parent: <Package tests>
        finish pytest_collect_directory --> <Package digest_cache> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram
            parent: <Package tests>
        finish pytest_collect_directory --> <Package telegram> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_ai_client.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_ai_client.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_ai_client.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_ai_client.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_ai_client.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_ai_client.py
          finish pytest_pycollect_makemodule --> <Module test_ai_client.py> [hook]
        finish pytest_collect_file --> [<Module test_ai_client.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_backup.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_backup.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_backup.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_backup.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_backup.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_backup.py
          finish pytest_pycollect_makemodule --> <Module test_backup.py> [hook]
        finish pytest_collect_file --> [<Module test_backup.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess.py
          finish pytest_pycollect_makemodule --> <Module test_confess.py> [hook]
        finish pytest_collect_file --> [<Module test_confess.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess_handler.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess_handler.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess_handler.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess_handler.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess_handler.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess_handler.py
          finish pytest_pycollect_makemodule --> <Module test_confess_handler.py> [hook]
        finish pytest_collect_file --> [<Module test_confess_handler.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_config_flags.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_config_flags.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_config_flags.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_config_flags.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_config_flags.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_config_flags.py
          finish pytest_pycollect_makemodule --> <Module test_config_flags.py> [hook]
        finish pytest_collect_file --> [<Module test_config_flags.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.db
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.db
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.db
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.db
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.py
          finish pytest_pycollect_makemodule --> <Module test_context.py> [hook]
        finish pytest_collect_file --> [<Module test_context.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_db.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_db.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_db.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_db.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_db.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_db.py
          finish pytest_pycollect_makemodule --> <Module test_db.py> [hook]
        finish pytest_collect_file --> [<Module test_db.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_digest.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_digest.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_digest.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_digest.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_digest.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_digest.py
          finish pytest_pycollect_makemodule --> <Module test_digest.py> [hook]
        finish pytest_collect_file --> [<Module test_digest.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_dummy.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_dummy.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_dummy.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_dummy.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_dummy.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_dummy.py
          finish pytest_pycollect_makemodule --> <Module test_dummy.py> [hook]
        finish pytest_collect_file --> [<Module test_dummy.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_hashtag.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_hashtag.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_hashtag.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_hashtag.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_hashtag.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_hashtag.py
          finish pytest_pycollect_makemodule --> <Module test_hashtag.py> [hook]
        finish pytest_collect_file --> [<Module test_hashtag.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_migration.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_migration.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_migration.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_migration.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_migration.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_migration.py
          finish pytest_pycollect_makemodule --> <Module test_migration.py> [hook]
        finish pytest_collect_file --> [<Module test_migration.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_production.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_production.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_production.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_production.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_production.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_production.py
          finish pytest_pycollect_makemodule --> <Module test_production.py> [hook]
        finish pytest_collect_file --> [<Module test_production.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_reaction.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_reaction.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_reaction.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_reaction.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_reaction.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_reaction.py
          finish pytest_pycollect_makemodule --> <Module test_reaction.py> [hook]
        finish pytest_collect_file --> [<Module test_reaction.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests' lenresult=15 outcome='passed'> [hook]
    genitems <Package digest_cache> [collection]
      pytest_collectstart [hook]
          collector: <Package digest_cache>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package digest_cache>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\__init__.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package digest_cache>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\__init__.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\digests
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\digests
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\digests
            parent: <Package digest_cache>
        finish pytest_collect_directory --> <Package digests> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/digest_cache' lenresult=1 outcome='passed'> [hook]
    genitems <Package digests> [collection]
      pytest_collectstart [hook]
          collector: <Package digests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package digests>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\digests\__init__.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\digests\__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package digests>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\digests\__init__.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\digest_cache\digests\__init__.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/digest_cache/digests' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/digest_cache/digests' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/digest_cache' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package telegram> [collection]
      pytest_collectstart [hook]
          collector: <Package telegram>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package telegram>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\__init__.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package telegram>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\__init__.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\__pycache__
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            collection_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\test_start_handler.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\test_start_handler.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package telegram>
            file_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\test_start_handler.py
            path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\test_start_handler.py
          pytest_pycollect_makemodule [hook]
              parent: <Package telegram>
              module_path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\test_start_handler.py
              path: C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\test_start_handler.py
          finish pytest_pycollect_makemodule --> <Module test_start_handler.py> [hook]
        finish pytest_collect_file --> [<Module test_start_handler.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/telegram' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_start_handler.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_start_handler.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_start_handler.py>
      early skip of rewriting module: tests.telegram [assertion]
      find_module called for: tests.telegram.test_start_handler [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\telegram\\test_start_handler.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\telegram\test_start_handler.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_start_handler.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_start_handler.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_start_handler.py>
            name: test_start_handler
            obj: <function test_start_handler at 0x000002053144A840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002053141DE80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_start_handler>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/telegram/test_start_handler.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_start_handler> [collection]
      pytest_itemcollected [hook]
          item: <Function test_start_handler>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/telegram/test_start_handler.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/telegram' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_ai_client.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_ai_client.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_ai_client.py>
      find_module called for: tests.test_ai_client [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_ai_client.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_ai_client.py [assertion]
      early skip of rewriting module: app.ai [assertion]
      early skip of rewriting module: app.ai.client [assertion]
      early skip of rewriting module: httpx [assertion]
      early skip of rewriting module: httpx.__version__ [assertion]
      early skip of rewriting module: httpx._api [assertion]
      early skip of rewriting module: httpx._client [assertion]
      early skip of rewriting module: httpx._auth [assertion]
      early skip of rewriting module: httpx._exceptions [assertion]
      early skip of rewriting module: httpx._models [assertion]
      early skip of rewriting module: http.cookiejar [assertion]
      early skip of rewriting module: calendar [assertion]
      early skip of rewriting module: httpx._content [assertion]
      early skip of rewriting module: httpx._multipart [assertion]
      early skip of rewriting module: httpx._types [assertion]
      early skip of rewriting module: httpx._utils [assertion]
      early skip of rewriting module: httpx._decoders [assertion]
      early skip of rewriting module: httpx._compat [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: httpx._status_codes [assertion]
      early skip of rewriting module: httpx._urls [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: httpx._urlparse [assertion]
      early skip of rewriting module: httpx._config [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: importlib.resources._adapters [assertion]
      early skip of rewriting module: importlib.readers [assertion]
      early skip of rewriting module: importlib.resources.readers [assertion]
      early skip of rewriting module: importlib.resources._itertools [assertion]
      early skip of rewriting module: httpx._transports [assertion]
      early skip of rewriting module: httpx._transports.asgi [assertion]
      early skip of rewriting module: httpx._transports.base [assertion]
      early skip of rewriting module: httpx._transports.default [assertion]
      early skip of rewriting module: httpcore [assertion]
      early skip of rewriting module: httpcore._api [assertion]
      early skip of rewriting module: httpcore._models [assertion]
      early skip of rewriting module: httpcore._sync [assertion]
      early skip of rewriting module: httpcore._sync.connection [assertion]
      early skip of rewriting module: httpcore._backends [assertion]
      early skip of rewriting module: httpcore._backends.sync [assertion]
      early skip of rewriting module: httpcore._exceptions [assertion]
      early skip of rewriting module: httpcore._utils [assertion]
      early skip of rewriting module: httpcore._backends.base [assertion]
      early skip of rewriting module: httpcore._ssl [assertion]
      early skip of rewriting module: httpcore._synchronization [assertion]
      early skip of rewriting module: trio [assertion]
      early skip of rewriting module: httpcore._trace [assertion]
      early skip of rewriting module: httpcore._sync.http11 [assertion]
      early skip of rewriting module: h11 [assertion]
      early skip of rewriting module: h11._connection [assertion]
      early skip of rewriting module: h11._events [assertion]
      early skip of rewriting module: h11._abnf [assertion]
      early skip of rewriting module: h11._headers [assertion]
      early skip of rewriting module: h11._util [assertion]
      early skip of rewriting module: h11._readers [assertion]
      early skip of rewriting module: h11._receivebuffer [assertion]
      early skip of rewriting module: h11._state [assertion]
      early skip of rewriting module: h11._writers [assertion]
      early skip of rewriting module: h11._version [assertion]
      early skip of rewriting module: httpcore._sync.interfaces [assertion]
      early skip of rewriting module: httpcore._sync.connection_pool [assertion]
      early skip of rewriting module: httpcore._sync.http_proxy [assertion]
      early skip of rewriting module: httpcore._sync.http2 [assertion]
      early skip of rewriting module: h2 [assertion]
      early skip of rewriting module: httpcore._sync.socks_proxy [assertion]
      early skip of rewriting module: socksio [assertion]
      early skip of rewriting module: httpcore._async [assertion]
      early skip of rewriting module: httpcore._async.connection [assertion]
      early skip of rewriting module: httpcore._backends.auto [assertion]
      early skip of rewriting module: httpcore._async.http11 [assertion]
      early skip of rewriting module: httpcore._async.interfaces [assertion]
      early skip of rewriting module: httpcore._async.connection_pool [assertion]
      early skip of rewriting module: httpcore._async.http_proxy [assertion]
      early skip of rewriting module: httpcore._async.http2 [assertion]
      early skip of rewriting module: h2 [assertion]
      early skip of rewriting module: httpcore._async.socks_proxy [assertion]
      early skip of rewriting module: socksio [assertion]
      early skip of rewriting module: httpcore._backends.mock [assertion]
      early skip of rewriting module: httpcore._backends.anyio [assertion]
      early skip of rewriting module: httpcore._backends.trio [assertion]
      early skip of rewriting module: trio [assertion]
      early skip of rewriting module: httpx._transports.wsgi [assertion]
      early skip of rewriting module: httpx._transports.mock [assertion]
      early skip of rewriting module: httpx._main [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: rich [assertion]
      early skip of rewriting module: rich._extension [assertion]
      early skip of rewriting module: rich.console [assertion]
      early skip of rewriting module: getpass [assertion]
      early skip of rewriting module: termios [assertion]
      early skip of rewriting module: rich._null_file [assertion]
      early skip of rewriting module: rich.errors [assertion]
      early skip of rewriting module: rich.themes [assertion]
      early skip of rewriting module: rich.default_styles [assertion]
      early skip of rewriting module: rich.style [assertion]
      early skip of rewriting module: rich.color [assertion]
      early skip of rewriting module: colorsys [assertion]
      early skip of rewriting module: rich._palettes [assertion]
      early skip of rewriting module: rich.palette [assertion]
      early skip of rewriting module: rich.color_triplet [assertion]
      early skip of rewriting module: rich.repr [assertion]
      early skip of rewriting module: rich.terminal_theme [assertion]
      early skip of rewriting module: rich.theme [assertion]
      early skip of rewriting module: configparser [assertion]
      early skip of rewriting module: rich._emoji_replace [assertion]
      early skip of rewriting module: rich._emoji_codes [assertion]
      early skip of rewriting module: rich._export_format [assertion]
      early skip of rewriting module: rich._fileno [assertion]
      early skip of rewriting module: rich._log_render [assertion]
      early skip of rewriting module: rich.text [assertion]
      early skip of rewriting module: rich._loop [assertion]
      early skip of rewriting module: rich._pick [assertion]
      early skip of rewriting module: rich._wrap [assertion]
      early skip of rewriting module: rich.cells [assertion]
      early skip of rewriting module: rich._cell_widths [assertion]
      early skip of rewriting module: rich.align [assertion]
      early skip of rewriting module: rich.constrain [assertion]
      early skip of rewriting module: rich.jupyter [assertion]
      early skip of rewriting module: rich.segment [assertion]
      early skip of rewriting module: rich.measure [assertion]
      early skip of rewriting module: rich.protocol [assertion]
      early skip of rewriting module: rich.containers [assertion]
      early skip of rewriting module: rich.control [assertion]
      early skip of rewriting module: rich.emoji [assertion]
      early skip of rewriting module: rich.highlighter [assertion]
      early skip of rewriting module: rich.markup [assertion]
      early skip of rewriting module: rich.pager [assertion]
      early skip of rewriting module: rich.pretty [assertion]
      early skip of rewriting module: array [assertion]
      early skip of rewriting module: attr [assertion]
      early skip of rewriting module: attr.converters [assertion]
      early skip of rewriting module: attr._compat [assertion]
      early skip of rewriting module: attr._make [assertion]
      early skip of rewriting module: attr._config [assertion]
      early skip of rewriting module: attr.setters [assertion]
      early skip of rewriting module: attr.exceptions [assertion]
      early skip of rewriting module: attr.filters [assertion]
      early skip of rewriting module: attr.validators [assertion]
      early skip of rewriting module: attr._cmp [assertion]
      early skip of rewriting module: attr._funcs [assertion]
      early skip of rewriting module: attr._next_gen [assertion]
      early skip of rewriting module: attr._version_info [assertion]
      early skip of rewriting module: rich.abc [assertion]
      early skip of rewriting module: rich.region [assertion]
      early skip of rewriting module: rich.scope [assertion]
      early skip of rewriting module: rich.panel [assertion]
      early skip of rewriting module: rich.box [assertion]
      early skip of rewriting module: rich.padding [assertion]
      early skip of rewriting module: rich.table [assertion]
      early skip of rewriting module: rich._ratio [assertion]
      early skip of rewriting module: fractions [assertion]
      early skip of rewriting module: rich.screen [assertion]
      early skip of rewriting module: rich.styled [assertion]
      early skip of rewriting module: rich.progress [assertion]
      early skip of rewriting module: mmap [assertion]
      early skip of rewriting module: rich.filesize [assertion]
      early skip of rewriting module: rich.live [assertion]
      early skip of rewriting module: rich.file_proxy [assertion]
      early skip of rewriting module: rich.ansi [assertion]
      early skip of rewriting module: rich.live_render [assertion]
      early skip of rewriting module: rich.progress_bar [assertion]
      early skip of rewriting module: rich.spinner [assertion]
      early skip of rewriting module: rich._spinners [assertion]
      early skip of rewriting module: rich.syntax [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.style [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.styles._mapping [assertion]
      early skip of rewriting module: requests [assertion]
      early skip of rewriting module: urllib3 [assertion]
      early skip of rewriting module: urllib3.exceptions [assertion]
      early skip of rewriting module: urllib3._base_connection [assertion]
      early skip of rewriting module: urllib3.util [assertion]
      early skip of rewriting module: urllib3.util.connection [assertion]
      early skip of rewriting module: urllib3.util.timeout [assertion]
      early skip of rewriting module: urllib3.util.request [assertion]
      early skip of rewriting module: urllib3.util.util [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: compression [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.util.response [assertion]
      early skip of rewriting module: urllib3.util.retry [assertion]
      early skip of rewriting module: urllib3.util.ssl_ [assertion]
      early skip of rewriting module: urllib3.util.url [assertion]
      early skip of rewriting module: urllib3.util.ssltransport [assertion]
      early skip of rewriting module: urllib3.util.wait [assertion]
      early skip of rewriting module: urllib3._collections [assertion]
      early skip of rewriting module: urllib3._version [assertion]
      early skip of rewriting module: urllib3.connectionpool [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: urllib3._request_methods [assertion]
      early skip of rewriting module: urllib3.filepost [assertion]
      early skip of rewriting module: urllib3.fields [assertion]
      early skip of rewriting module: urllib3.response [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: urllib3.connection [assertion]
      early skip of rewriting module: urllib3.http2 [assertion]
      early skip of rewriting module: urllib3.http2.probe [assertion]
      early skip of rewriting module: urllib3.util.ssl_match_hostname [assertion]
      early skip of rewriting module: compression [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.util.proxy [assertion]
      early skip of rewriting module: urllib3.poolmanager [assertion]
      early skip of rewriting module: requests.exceptions [assertion]
      early skip of rewriting module: requests.compat [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: charset_normalizer [assertion]
      early skip of rewriting module: charset_normalizer.api [assertion]
      early skip of rewriting module: charset_normalizer.cd [assertion]
      early skip of rewriting module: charset_normalizer.constant [assertion]
      early skip of rewriting module: charset_normalizer.md [assertion]
      early skip of rewriting module: charset_normalizer.md__mypyc [assertion]
      early skip of rewriting module: charset_normalizer.utils [assertion]
      early skip of rewriting module: _multibytecodec [assertion]
      early skip of rewriting module: charset_normalizer.models [assertion]
      early skip of rewriting module: charset_normalizer.legacy [assertion]
      early skip of rewriting module: charset_normalizer.version [assertion]
      early skip of rewriting module: simplejson [assertion]
      early skip of rewriting module: http.cookies [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: requests.packages [assertion]
      early skip of rewriting module: requests.utils [assertion]
      early skip of rewriting module: requests.certs [assertion]
      early skip of rewriting module: requests.__version__ [assertion]
      early skip of rewriting module: requests._internal_utils [assertion]
      early skip of rewriting module: requests.cookies [assertion]
      early skip of rewriting module: requests.structures [assertion]
      early skip of rewriting module: requests.api [assertion]
      early skip of rewriting module: requests.sessions [assertion]
      early skip of rewriting module: requests.adapters [assertion]
      early skip of rewriting module: requests.auth [assertion]
      early skip of rewriting module: requests.models [assertion]
      early skip of rewriting module: encodings.idna [assertion]
      early skip of rewriting module: stringprep [assertion]
      early skip of rewriting module: requests.hooks [assertion]
      early skip of rewriting module: requests.status_codes [assertion]
      early skip of rewriting module: urllib3.contrib [assertion]
      early skip of rewriting module: urllib3.contrib.socks [assertion]
      early skip of rewriting module: socks [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_client.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_client.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_client.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_client.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_client.py>
            name: AIClient
            obj: <class 'app.ai.client.AIClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_client.py>
            name: AIResult
            obj: <class 'app.ai.client.AIResult'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_client.py>
            name: test_generate_stub_mode
            obj: <function test_generate_stub_mode at 0x000002053144AD40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020532A35A90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_stub_mode>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_client.py>
            name: test_generate_mocked
            obj: <function test_generate_mocked at 0x000002053144B420>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020532A35A90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_mocked>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_ai_client.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_generate_stub_mode> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_stub_mode>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_generate_mocked> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_mocked>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_ai_client.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_backup.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_backup.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_backup.py>
      find_module called for: tests.test_backup [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_backup.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_backup.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_backup.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_backup.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_backup.py>
            name: test_backup_exists
            obj: <function test_backup_exists at 0x0000020532B2A8E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020532AA9CD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_backup_exists>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_backup.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_backup_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_backup_exists>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_backup.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_confess.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_confess.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_confess.py>
      find_module called for: tests.test_confess [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_confess.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess.py [assertion]
      early skip of rewriting module: app.services [assertion]
      early skip of rewriting module: app.services.confess_service [assertion]
      early skip of rewriting module: app.services.nlp_service [assertion]
      early skip of rewriting module: app.utils [assertion]
      early skip of rewriting module: app.utils.text [assertion]
      early skip of rewriting module: config.db [assertion]
      early skip of rewriting module: config.db_manager [assertion]
      early skip of rewriting module: psycopg [assertion]
      early skip of rewriting module: psycopg.pq [assertion]
      early skip of rewriting module: psycopg.pq.abc [assertion]
      early skip of rewriting module: psycopg.pq._enums [assertion]
      early skip of rewriting module: psycopg._compat [assertion]
      early skip of rewriting module: zoneinfo [assertion]
      early skip of rewriting module: zoneinfo._tzpath [assertion]
      early skip of rewriting module: sysconfig [assertion]
      early skip of rewriting module: _sysconfig [assertion]
      early skip of rewriting module: zoneinfo._common [assertion]
      early skip of rewriting module: _zoneinfo [assertion]
      early skip of rewriting module: psycopg.pq.misc [assertion]
      early skip of rewriting module: ctypes.util [assertion]
      early skip of rewriting module: psycopg_c [assertion]
      early skip of rewriting module: psycopg_binary [assertion]
      early skip of rewriting module: psycopg_binary.version [assertion]
      early skip of rewriting module: psycopg_binary.pq [assertion]
      early skip of rewriting module: psycopg.errors [assertion]
      early skip of rewriting module: psycopg._encodings [assertion]
      early skip of rewriting module: psycopg.dbapi20 [assertion]
      early skip of rewriting module: psycopg._oids [assertion]
      early skip of rewriting module: psycopg.abc [assertion]
      early skip of rewriting module: psycopg._enums [assertion]
      early skip of rewriting module: psycopg.types [assertion]
      early skip of rewriting module: psycopg._typeinfo [assertion]
      early skip of rewriting module: psycopg.sql [assertion]
      early skip of rewriting module: psycopg._transformer [assertion]
      early skip of rewriting module: psycopg._cmodule [assertion]
      early skip of rewriting module: psycopg_binary._psycopg [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: psycopg.rows [assertion]
      early skip of rewriting module: psycopg._wrappers [assertion]
      early skip of rewriting module: psycopg._typemod [assertion]
      early skip of rewriting module: psycopg.types.string [assertion]
      early skip of rewriting module: psycopg.adapt [assertion]
      early skip of rewriting module: psycopg._adapters_map [assertion]
      early skip of rewriting module: psycopg.postgres [assertion]
      early skip of rewriting module: psycopg._tpc [assertion]
      early skip of rewriting module: psycopg.copy [assertion]
      early skip of rewriting module: psycopg._copy [assertion]
      early skip of rewriting module: psycopg._acompat [assertion]
      early skip of rewriting module: psycopg._copy_base [assertion]
      early skip of rewriting module: psycopg.generators [assertion]
      early skip of rewriting module: psycopg.waiting [assertion]
      early skip of rewriting module: psycopg._copy_async [assertion]
      early skip of rewriting module: psycopg.cursor [assertion]
      early skip of rewriting module: psycopg._pipeline [assertion]
      early skip of rewriting module: psycopg._capabilities [assertion]
      early skip of rewriting module: psycopg._cursor_base [assertion]
      early skip of rewriting module: psycopg._column [assertion]
      early skip of rewriting module: psycopg._queries [assertion]
      early skip of rewriting module: psycopg._preparing [assertion]
      early skip of rewriting module: psycopg.version [assertion]
      early skip of rewriting module: psycopg.connection [assertion]
      early skip of rewriting module: psycopg.conninfo [assertion]
      early skip of rewriting module: psycopg._conninfo_attempts [assertion]
      early skip of rewriting module: psycopg._conninfo_utils [assertion]
      early skip of rewriting module: psycopg._conninfo_attempts_async [assertion]
      early skip of rewriting module: psycopg.transaction [assertion]
      early skip of rewriting module: psycopg._server_cursor [assertion]
      early skip of rewriting module: psycopg._server_cursor_base [assertion]
      early skip of rewriting module: psycopg._connection_base [assertion]
      early skip of rewriting module: psycopg._connection_info [assertion]
      early skip of rewriting module: psycopg._tz [assertion]
      early skip of rewriting module: psycopg.raw_cursor [assertion]
      early skip of rewriting module: psycopg.cursor_async [assertion]
      early skip of rewriting module: psycopg._server_cursor_async [assertion]
      early skip of rewriting module: psycopg.client_cursor [assertion]
      early skip of rewriting module: psycopg.connection_async [assertion]
      early skip of rewriting module: psycopg.types.range [assertion]
      early skip of rewriting module: psycopg._struct [assertion]
      early skip of rewriting module: psycopg.types.multirange [assertion]
      early skip of rewriting module: psycopg.types.array [assertion]
      early skip of rewriting module: psycopg.types.bool [assertion]
      early skip of rewriting module: psycopg.types.composite [assertion]
      early skip of rewriting module: psycopg.types.datetime [assertion]
      early skip of rewriting module: psycopg.types.enum [assertion]
      early skip of rewriting module: psycopg.types.json [assertion]
      early skip of rewriting module: psycopg.types.net [assertion]
      early skip of rewriting module: psycopg.types.none [assertion]
      early skip of rewriting module: psycopg.types.numeric [assertion]
      early skip of rewriting module: psycopg.types.numpy [assertion]
      early skip of rewriting module: psycopg.types.uuid [assertion]
      early skip of rewriting module: app.models.confession [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess.py>
            name: app
            obj: <Flask 'app'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess.py>
            name: save_confession
            obj: <function save_confession at 0x0000020532B2ADE0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess.py>
            name: test_save_confession
            obj: <function test_save_confession at 0x0000020532B2AA20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020532D37820>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_save_confession>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_confess.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_save_confession> [collection]
      pytest_itemcollected [hook]
          item: <Function test_save_confession>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_confess.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_confess_handler.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_confess_handler.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_confess_handler.py>
      find_module called for: tests.test_confess_handler [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_confess_handler.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_confess_handler.py [assertion]
      early skip of rewriting module: unittest.mock [assertion]
      early skip of rewriting module: telegram [assertion]
      early skip of rewriting module: telegram._version [assertion]
      early skip of rewriting module: telegram.constants [assertion]
      early skip of rewriting module: telegram._utils [assertion]
      early skip of rewriting module: telegram._utils.enum [assertion]
      early skip of rewriting module: telegram.error [assertion]
      early skip of rewriting module: telegram.helpers [assertion]
      early skip of rewriting module: telegram._utils.types [assertion]
      early skip of rewriting module: telegram.request [assertion]
      early skip of rewriting module: telegram.request._baserequest [assertion]
      early skip of rewriting module: telegram._utils.defaultvalue [assertion]
      early skip of rewriting module: telegram._utils.logging [assertion]
      early skip of rewriting module: telegram._utils.warnings [assertion]
      early skip of rewriting module: telegram.warnings [assertion]
      early skip of rewriting module: telegram.request._requestdata [assertion]
      early skip of rewriting module: telegram.request._requestparameter [assertion]
      early skip of rewriting module: telegram._files [assertion]
      early skip of rewriting module: telegram._files.inputfile [assertion]
      early skip of rewriting module: telegram._utils.files [assertion]
      early skip of rewriting module: telegram._files.inputmedia [assertion]
      early skip of rewriting module: telegram._files.animation [assertion]
      early skip of rewriting module: telegram._files._basethumbedmedium [assertion]
      early skip of rewriting module: telegram._files._basemedium [assertion]
      early skip of rewriting module: telegram._telegramobject [assertion]
      early skip of rewriting module: telegram._utils.datetime [assertion]
      early skip of rewriting module: pytz [assertion]
      early skip of rewriting module: pytz.exceptions [assertion]
      early skip of rewriting module: pytz.lazy [assertion]
      early skip of rewriting module: pytz.tzinfo [assertion]
      early skip of rewriting module: pytz.tzfile [assertion]
      early skip of rewriting module: telegram._files.photosize [assertion]
      early skip of rewriting module: telegram._files.audio [assertion]
      early skip of rewriting module: telegram._files.document [assertion]
      early skip of rewriting module: telegram._files.video [assertion]
      early skip of rewriting module: telegram._messageentity [assertion]
      early skip of rewriting module: telegram._user [assertion]
      early skip of rewriting module: telegram._inline [assertion]
      early skip of rewriting module: telegram._inline.inlinekeyboardbutton [assertion]
      early skip of rewriting module: telegram._games [assertion]
      early skip of rewriting module: telegram._games.callbackgame [assertion]
      early skip of rewriting module: telegram._loginurl [assertion]
      early skip of rewriting module: telegram._switchinlinequerychosenchat [assertion]
      early skip of rewriting module: telegram._webappinfo [assertion]
      early skip of rewriting module: telegram._menubutton [assertion]
      early skip of rewriting module: telegram._utils.argumentparsing [assertion]
      early skip of rewriting module: telegram._files.inputsticker [assertion]
      early skip of rewriting module: telegram._files.sticker [assertion]
      early skip of rewriting module: telegram._files.file [assertion]
      early skip of rewriting module: telegram._passport [assertion]
      early skip of rewriting module: telegram._passport.credentials [assertion]
      early skip of rewriting module: cryptography [assertion]
      early skip of rewriting module: telegram.request._httpxrequest [assertion]
      early skip of rewriting module: telegram._bot [assertion]
      early skip of rewriting module: cryptography [assertion]
      early skip of rewriting module: telegram._botcommand [assertion]
      early skip of rewriting module: telegram._botcommandscope [assertion]
      early skip of rewriting module: telegram._botdescription [assertion]
      early skip of rewriting module: telegram._botname [assertion]
      early skip of rewriting module: telegram._chat [assertion]
      early skip of rewriting module: telegram._chatlocation [assertion]
      early skip of rewriting module: telegram._files.location [assertion]
      early skip of rewriting module: telegram._chatpermissions [assertion]
      early skip of rewriting module: telegram._files.chatphoto [assertion]
      early skip of rewriting module: telegram._forumtopic [assertion]
      early skip of rewriting module: telegram._chatadministratorrights [assertion]
      early skip of rewriting module: telegram._chatinvitelink [assertion]
      early skip of rewriting module: telegram._chatmember [assertion]
      early skip of rewriting module: telegram._files.contact [assertion]
      early skip of rewriting module: telegram._files.venue [assertion]
      early skip of rewriting module: telegram._files.videonote [assertion]
      early skip of rewriting module: telegram._files.voice [assertion]
      early skip of rewriting module: telegram._games.gamehighscore [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultsbutton [assertion]
      early skip of rewriting module: telegram._message [assertion]
      early skip of rewriting module: telegram._dice [assertion]
      early skip of rewriting module: telegram._games.game [assertion]
      early skip of rewriting module: telegram._inline.inlinekeyboardmarkup [assertion]
      early skip of rewriting module: telegram._utils.markup [assertion]
      early skip of rewriting module: telegram._messageautodeletetimerchanged [assertion]
      early skip of rewriting module: telegram._passport.passportdata [assertion]
      early skip of rewriting module: telegram._passport.encryptedpassportelement [assertion]
      early skip of rewriting module: telegram._passport.data [assertion]
      early skip of rewriting module: telegram._passport.passportfile [assertion]
      early skip of rewriting module: telegram._payment [assertion]
      early skip of rewriting module: telegram._payment.invoice [assertion]
      early skip of rewriting module: telegram._payment.successfulpayment [assertion]
      early skip of rewriting module: telegram._payment.orderinfo [assertion]
      early skip of rewriting module: telegram._payment.shippingaddress [assertion]
      early skip of rewriting module: telegram._poll [assertion]
      early skip of rewriting module: telegram._proximityalerttriggered [assertion]
      early skip of rewriting module: telegram._shared [assertion]
      early skip of rewriting module: telegram._story [assertion]
      early skip of rewriting module: telegram._videochat [assertion]
      early skip of rewriting module: telegram._webappdata [assertion]
      early skip of rewriting module: telegram._writeaccessallowed [assertion]
      early skip of rewriting module: telegram._messageid [assertion]
      early skip of rewriting module: telegram._sentwebappmessage [assertion]
      early skip of rewriting module: telegram._update [assertion]
      early skip of rewriting module: telegram._callbackquery [assertion]
      early skip of rewriting module: telegram._chatjoinrequest [assertion]
      early skip of rewriting module: telegram._chatmemberupdated [assertion]
      early skip of rewriting module: telegram._choseninlineresult [assertion]
      early skip of rewriting module: telegram._inline.inlinequery [assertion]
      early skip of rewriting module: telegram._payment.precheckoutquery [assertion]
      early skip of rewriting module: telegram._payment.shippingquery [assertion]
      early skip of rewriting module: telegram._userprofilephotos [assertion]
      early skip of rewriting module: telegram._utils.repr [assertion]
      early skip of rewriting module: telegram._webhookinfo [assertion]
      early skip of rewriting module: telegram._forcereply [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresult [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultarticle [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultaudio [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcachedaudio [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcacheddocument [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcachedgif [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcachedmpeg4gif [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcachedphoto [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcachedsticker [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcachedvideo [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcachedvoice [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultcontact [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultdocument [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultgame [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultgif [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultlocation [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultmpeg4gif [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultphoto [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultvenue [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultvideo [assertion]
      early skip of rewriting module: telegram._inline.inlinequeryresultvoice [assertion]
      early skip of rewriting module: telegram._inline.inputcontactmessagecontent [assertion]
      early skip of rewriting module: telegram._inline.inputmessagecontent [assertion]
      early skip of rewriting module: telegram._inline.inputinvoicemessagecontent [assertion]
      early skip of rewriting module: telegram._payment.labeledprice [assertion]
      early skip of rewriting module: telegram._inline.inputlocationmessagecontent [assertion]
      early skip of rewriting module: telegram._inline.inputtextmessagecontent [assertion]
      early skip of rewriting module: telegram._inline.inputvenuemessagecontent [assertion]
      early skip of rewriting module: telegram._keyboardbutton [assertion]
      early skip of rewriting module: telegram._keyboardbuttonpolltype [assertion]
      early skip of rewriting module: telegram._keyboardbuttonrequest [assertion]
      early skip of rewriting module: telegram._passport.passportelementerrors [assertion]
      early skip of rewriting module: telegram._payment.shippingoption [assertion]
      early skip of rewriting module: telegram._replykeyboardmarkup [assertion]
      early skip of rewriting module: telegram._replykeyboardremove [assertion]
      early skip of rewriting module: telegram.ext [assertion]
      early skip of rewriting module: telegram.ext.filters [assertion]
      early skip of rewriting module: telegram.ext._utils [assertion]
      early skip of rewriting module: telegram.ext._utils.types [assertion]
      early skip of rewriting module: telegram.ext._aioratelimiter [assertion]
      early skip of rewriting module: aiolimiter [assertion]
      early skip of rewriting module: telegram.ext._baseratelimiter [assertion]
      early skip of rewriting module: telegram.ext._application [assertion]
      early skip of rewriting module: telegram.ext._basehandler [assertion]
      early skip of rewriting module: telegram.ext._basepersistence [assertion]
      early skip of rewriting module: telegram.ext._extbot [assertion]
      early skip of rewriting module: telegram.ext._callbackdatacache [assertion]
      early skip of rewriting module: cachetools [assertion]
      early skip of rewriting module: telegram.ext._contexttypes [assertion]
      early skip of rewriting module: telegram.ext._callbackcontext [assertion]
      early skip of rewriting module: telegram.ext._updater [assertion]
      early skip of rewriting module: telegram.ext._utils.webhookhandler [assertion]
      early skip of rewriting module: tornado [assertion]
      early skip of rewriting module: telegram.ext._utils.stack [assertion]
      early skip of rewriting module: telegram.ext._utils.trackingdict [assertion]
      early skip of rewriting module: telegram.ext._applicationbuilder [assertion]
      early skip of rewriting module: telegram.ext._baseupdateprocessor [assertion]
      early skip of rewriting module: telegram.ext._jobqueue [assertion]
      early skip of rewriting module: apscheduler [assertion]
      early skip of rewriting module: apscheduler.executors [assertion]
      early skip of rewriting module: apscheduler.executors.asyncio [assertion]
      early skip of rewriting module: apscheduler.executors.base [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: apscheduler.events [assertion]
      early skip of rewriting module: apscheduler.executors.base_py3 [assertion]
      early skip of rewriting module: apscheduler.util [assertion]
      early skip of rewriting module: apscheduler.schedulers [assertion]
      early skip of rewriting module: apscheduler.schedulers.asyncio [assertion]
      early skip of rewriting module: apscheduler.schedulers.base [assertion]
      early skip of rewriting module: tzlocal [assertion]
      early skip of rewriting module: tzlocal.win32 [assertion]
      early skip of rewriting module: _winreg [assertion]
      early skip of rewriting module: tzlocal.utils [assertion]
      early skip of rewriting module: tzlocal.windows_tz [assertion]
      early skip of rewriting module: apscheduler.executors.pool [assertion]
      early skip of rewriting module: concurrent.futures.process [assertion]
      early skip of rewriting module: multiprocessing [assertion]
      early skip of rewriting module: multiprocessing.context [assertion]
      early skip of rewriting module: multiprocessing.process [assertion]
      early skip of rewriting module: multiprocessing.reduction [assertion]
      early skip of rewriting module: multiprocessing.connection [assertion]
      early skip of rewriting module: multiprocessing.util [assertion]
      early skip of rewriting module: _multiprocessing [assertion]
      early skip of rewriting module: multiprocessing.queues [assertion]
      early skip of rewriting module: apscheduler.jobstores [assertion]
      early skip of rewriting module: apscheduler.jobstores.base [assertion]
      early skip of rewriting module: apscheduler.jobstores.memory [assertion]
      early skip of rewriting module: apscheduler.job [assertion]
      early skip of rewriting module: apscheduler.triggers [assertion]
      early skip of rewriting module: apscheduler.triggers.base [assertion]
      early skip of rewriting module: telegram.ext._callbackqueryhandler [assertion]
      early skip of rewriting module: telegram.ext._chatjoinrequesthandler [assertion]
      early skip of rewriting module: telegram.ext._chatmemberhandler [assertion]
      early skip of rewriting module: telegram.ext._choseninlineresulthandler [assertion]
      early skip of rewriting module: telegram.ext._commandhandler [assertion]
      early skip of rewriting module: telegram.ext._conversationhandler [assertion]
      early skip of rewriting module: telegram.ext._inlinequeryhandler [assertion]
      early skip of rewriting module: telegram.ext._stringcommandhandler [assertion]
      early skip of rewriting module: telegram.ext._stringregexhandler [assertion]
      early skip of rewriting module: telegram.ext._typehandler [assertion]
      early skip of rewriting module: telegram.ext._defaults [assertion]
      early skip of rewriting module: telegram.ext._dictpersistence [assertion]
      early skip of rewriting module: telegram.ext._messagehandler [assertion]
      early skip of rewriting module: telegram.ext._picklepersistence [assertion]
      early skip of rewriting module: telegram.ext._pollanswerhandler [assertion]
      early skip of rewriting module: telegram.ext._pollhandler [assertion]
      early skip of rewriting module: telegram.ext._precheckoutqueryhandler [assertion]
      early skip of rewriting module: telegram.ext._prefixhandler [assertion]
      early skip of rewriting module: telegram.ext._shippingqueryhandler [assertion]
      early skip of rewriting module: app.telegram [assertion]
      early skip of rewriting module: app.telegram.handlers [assertion]
      early skip of rewriting module: app.telegram.handlers.confess_handler [assertion]
      early skip of rewriting module: app.telegram.helpers [assertion]
      early skip of rewriting module: app.services.ai_generate [assertion]
      early skip of rewriting module: app.services.ai_engine [assertion]
      early skip of rewriting module: app.ai_adapter [assertion]
      early skip of rewriting module: app.services.ai_context [assertion]
      early skip of rewriting module: app.services.settings_service [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: Update
            obj: <class 'telegram._update.Update'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: Message
            obj: <class 'telegram._message.Message'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: User
            obj: <class 'telegram._user.User'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: ContextTypes
            obj: <class 'telegram.ext._contexttypes.ContextTypes'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: handle_confession_text
            obj: <function handle_confession_text at 0x00000205332D8E00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_confess_handler.py>
            name: test_handle_confession_text_valid
            obj: <function test_handle_confession_text_valid at 0x0000020532E5A020>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000205332F0710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_handle_confession_text_valid>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_confess_handler.py' lenresult=1 outcome='passed'> [hook]
    genitems <Coroutine test_handle_confession_text_valid> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_handle_confession_text_valid>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_confess_handler.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_config_flags.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_config_flags.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_config_flags.py>
      find_module called for: tests.test_config_flags [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_config_flags.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_config_flags.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flags.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flags.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flags.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flags.py>
            name: importlib
            obj: <module 'importlib' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\importlib\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flags.py>
            name: reload_config
            obj: <function reload_config at 0x00000205332D9D00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flags.py>
            name: test_ai_confess_reply_enabled
            obj: <function test_ai_confess_reply_enabled at 0x00000205332D9DA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000205332B0C00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ai_confess_reply_enabled>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flags.py>
            name: test_ai_confess_reply_disabled
            obj: <function test_ai_confess_reply_disabled at 0x00000205332D9E40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000205332B09E0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ai_confess_reply_disabled>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flags.py>
            name: test_ai_confess_reply_default
            obj: <function test_ai_confess_reply_default at 0x00000205332D9EE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002053324A450>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ai_confess_reply_default>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_config_flags.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_ai_confess_reply_enabled> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ai_confess_reply_enabled>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ai_confess_reply_disabled> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ai_confess_reply_disabled>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ai_confess_reply_default> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ai_confess_reply_default>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_config_flags.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_context.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_context.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_context.py>
      find_module called for: tests.test_context [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_context.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_context.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: sqlite3
            obj: <module 'sqlite3' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\sqlite3\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: closing
            obj: <class 'contextlib.closing'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: build_context
            obj: <function build_context at 0x00000205332D9940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: system_prompt
            obj: <function system_prompt at 0x00000205332D99E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: generate_confession
            obj: <function generate_confession at 0x00000205332D9080>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: DB_PATH
            obj: tests/test_context.db
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: setup_test_db
            obj: <function setup_test_db at 0x00000205332DA0C0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: test_build_context
            obj: <function test_build_context at 0x00000205332DA160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002053324A750>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_build_context>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: test_system_prompt
            obj: <function test_system_prompt at 0x00000205332DA200>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020533276B70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_system_prompt>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_context.py>
            name: test_generate_confession
            obj: <function test_generate_confession at 0x00000205332DA2A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020533276B70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_confession>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_context.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_build_context> [collection]
      pytest_itemcollected [hook]
          item: <Function test_build_context>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_system_prompt> [collection]
      pytest_itemcollected [hook]
          item: <Function test_system_prompt>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_generate_confession> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_confession>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_context.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_db.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_db.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_db.py>
      find_module called for: tests.test_db [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_db.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_db.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_db.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_db.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_db.py>
            name: app
            obj: <Flask 'app'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_db.py>
            name: get_db
            obj: <function get_db at 0x0000020532E03B00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_db.py>
            name: test_db_connection
            obj: <function test_db_connection at 0x00000205332DA660>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000205332F8210>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_db_connection>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_db.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_db_connection> [collection]
      pytest_itemcollected [hook]
          item: <Function test_db_connection>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_db.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_digest.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_digest.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_digest.py>
      find_module called for: tests.test_digest [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_digest.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_digest.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_digest.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_digest.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_digest.py>
            name: test_generate_digest
            obj: <function test_generate_digest at 0x00000205332DA840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000205332F8590>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_digest>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_digest.py>
            name: test_has_relevant_posts
            obj: <function test_has_relevant_posts at 0x00000205332DA8E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020533242F70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_has_relevant_posts>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_digest.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_generate_digest> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_digest>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_has_relevant_posts> [collection]
      pytest_itemcollected [hook]
          item: <Function test_has_relevant_posts>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_digest.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_dummy.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_dummy.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_dummy.py>
      find_module called for: tests.test_dummy [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_dummy.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_dummy.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dummy.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dummy.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dummy.py>
            name: test_dummy
            obj: <function test_dummy at 0x00000205332DAAC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020533197410>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dummy>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_dummy.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_dummy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dummy>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_dummy.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_hashtag.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_hashtag.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_hashtag.py>
      find_module called for: tests.test_hashtag [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_hashtag.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_hashtag.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hashtag.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hashtag.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hashtag.py>
            name: test_extract_hashtags
            obj: <function test_extract_hashtags at 0x00000205332DADE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x0000020533197410>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_hashtags>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_hashtag.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_extract_hashtags> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_hashtags>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_hashtag.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_migration.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_migration.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_migration.py>
      find_module called for: tests.test_migration [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_migration.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_migration.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_migration.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_migration.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_migration.py>
            name: test_migration
            obj: <function test_migration at 0x00000205332DAD40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000205331FF540>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_migration>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_migration.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_migration> [collection]
      pytest_itemcollected [hook]
          item: <Function test_migration>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_migration.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_production.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_production.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_production.py>
      find_module called for: tests.test_production [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_production.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_production.py [assertion]
      early skip of rewriting module: alembic_env [assertion]
      early skip of rewriting module: alembic [assertion]
      early skip of rewriting module: alembic.context [assertion]
      early skip of rewriting module: alembic.runtime [assertion]
      early skip of rewriting module: alembic.runtime.environment [assertion]
      early skip of rewriting module: alembic.runtime.migration [assertion]
      early skip of rewriting module: sqlalchemy.engine.strategies [assertion]
      early skip of rewriting module: alembic.ddl [assertion]
      early skip of rewriting module: alembic.ddl.mssql [assertion]
      early skip of rewriting module: alembic.ddl.base [assertion]
      early skip of rewriting module: sqlalchemy.ext [assertion]
      early skip of rewriting module: sqlalchemy.ext.compiler [assertion]
      early skip of rewriting module: alembic.util [assertion]
      early skip of rewriting module: alembic.util.editor [assertion]
      early skip of rewriting module: alembic.util.compat [assertion]
      early skip of rewriting module: tomllib [assertion]
      early skip of rewriting module: tomllib._parser [assertion]
      early skip of rewriting module: tomllib._re [assertion]
      early skip of rewriting module: tomllib._types [assertion]
      early skip of rewriting module: alembic.util.exc [assertion]
      early skip of rewriting module: alembic.util.langhelpers [assertion]
      early skip of rewriting module: alembic.util.messaging [assertion]
      early skip of rewriting module: fcntl [assertion]
      early skip of rewriting module: alembic.util.pyfiles [assertion]
      early skip of rewriting module: mako [assertion]
      early skip of rewriting module: mako.exceptions [assertion]
      early skip of rewriting module: mako.compat [assertion]
      early skip of rewriting module: mako.util [assertion]
      early skip of rewriting module: timeit [assertion]
      early skip of rewriting module: mako.ext [assertion]
      early skip of rewriting module: mako.ext.pygmentplugin [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.formatters.html [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: ctags [assertion]
      early skip of rewriting module: pygments.lexers.agile [assertion]
      early skip of rewriting module: pygments.lexers.lisp [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.lexers._scheme_builtins [assertion]
      early skip of rewriting module: pygments.lexers.jvm [assertion]
      early skip of rewriting module: pygments.lexers.ruby [assertion]
      early skip of rewriting module: pygments.lexers.perl [assertion]
      early skip of rewriting module: pygments.lexers.d [assertion]
      early skip of rewriting module: pygments.lexers.iolang [assertion]
      early skip of rewriting module: pygments.lexers.tcl [assertion]
      early skip of rewriting module: pygments.lexers.factor [assertion]
      early skip of rewriting module: pygments.lexers.scripting [assertion]
      early skip of rewriting module: pygments.lexers._lua_builtins [assertion]
      early skip of rewriting module: pygments.lexers.web [assertion]
      early skip of rewriting module: pygments.lexers.html [assertion]
      early skip of rewriting module: pygments.lexers.javascript [assertion]
      early skip of rewriting module: pygments.lexers.css [assertion]
      early skip of rewriting module: pygments.lexers._css_builtins [assertion]
      early skip of rewriting module: pygments.lexers.actionscript [assertion]
      early skip of rewriting module: pygments.lexers.php [assertion]
      early skip of rewriting module: pygments.lexers.webmisc [assertion]
      early skip of rewriting module: pygments.lexers.data [assertion]
      early skip of rewriting module: pygments.styles.default [assertion]
      early skip of rewriting module: mako.template [assertion]
      early skip of rewriting module: mako.cache [assertion]
      early skip of rewriting module: mako.codegen [assertion]
      early skip of rewriting module: mako.ast [assertion]
      early skip of rewriting module: mako.pyparser [assertion]
      early skip of rewriting module: mako._ast_util [assertion]
      early skip of rewriting module: mako.filters [assertion]
      early skip of rewriting module: mako.parsetree [assertion]
      early skip of rewriting module: mako.pygen [assertion]
      early skip of rewriting module: mako.runtime [assertion]
      early skip of rewriting module: mako.lexer [assertion]
      early skip of rewriting module: alembic.util.sqla_compat [assertion]
      early skip of rewriting module: alembic.ddl.impl [assertion]
      early skip of rewriting module: alembic.ddl._autogen [assertion]
      early skip of rewriting module: alembic.ddl.mysql [assertion]
      early skip of rewriting module: alembic.ddl.oracle [assertion]
      early skip of rewriting module: alembic.ddl.postgresql [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.array [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.operators [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.asyncpg [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.json [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.ranges [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.base [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.pg_catalog [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.types [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.ext [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.hstore [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.named_types [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.pg8000 [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.psycopg [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql._psycopg_common [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.psycopg2 [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.psycopg2cffi [assertion]
      early skip of rewriting module: sqlalchemy.dialects.postgresql.dml [assertion]
      early skip of rewriting module: alembic.autogenerate [assertion]
      early skip of rewriting module: alembic.autogenerate.api [assertion]
      early skip of rewriting module: alembic.autogenerate.compare [assertion]
      early skip of rewriting module: alembic.operations [assertion]
      early skip of rewriting module: alembic.operations.toimpl [assertion]
      early skip of rewriting module: alembic.operations.ops [assertion]
      early skip of rewriting module: alembic.operations.schemaobj [assertion]
      early skip of rewriting module: alembic.operations.base [assertion]
      early skip of rewriting module: alembic.operations.batch [assertion]
      early skip of rewriting module: alembic.autogenerate.render [assertion]
      early skip of rewriting module: alembic.autogenerate.rewriter [assertion]
      early skip of rewriting module: alembic.ddl.sqlite [assertion]
      early skip of rewriting module: alembic.script [assertion]
      early skip of rewriting module: alembic.script.base [assertion]
      early skip of rewriting module: alembic.script.revision [assertion]
      early skip of rewriting module: alembic.script.write_hooks [assertion]
      early skip of rewriting module: alembic.op [assertion]
      early skip of rewriting module: alembic.command [assertion]
      early skip of rewriting module: alembic_env.config [assertion]
      early skip of rewriting module: alembic.config [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: app
            obj: <Flask 'app'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: command
            obj: <module 'alembic.command' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\alembic\\command.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: Config
            obj: <class 'alembic_env.config.Config'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: DBManager
            obj: <class 'config.db_manager.DBManager'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: test_migrations
            obj: <function test_migrations at 0x00000205332DA340>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x00000205337DCF70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_migrations>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: test_critical_services
            obj: <function test_critical_services at 0x00000205332DAFC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002053382EF30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_critical_services>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_production.py>
            name: test_backup_integrity
            obj: <function test_backup_integrity at 0x00000205332DB060>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002053382EFD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_backup_integrity>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_production.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_migrations> [collection]
      pytest_itemcollected [hook]
          item: <Function test_migrations>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_critical_services> [collection]
      pytest_itemcollected [hook]
          item: <Function test_critical_services>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_backup_integrity> [collection]
      pytest_itemcollected [hook]
          item: <Function test_backup_integrity>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_production.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_reaction.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_reaction.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_reaction.py>
      find_module called for: tests.test_reaction [assertion]
      matched test file 'C:\\Users\\Mad_Dog\\Desktop\\shit_happens\\tests\\test_reaction.py' [assertion]
      found cached rewritten pyc for C:\Users\Mad_Dog\Desktop\shit_happens\tests\test_reaction.py [assertion]
      early skip of rewriting module: app.services.reaction_service [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reaction.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reaction.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\Mad_Dog\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reaction.py>
            name: app
            obj: <Flask 'app'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reaction.py>
            name: add_reaction
            obj: <function add_reaction at 0x0000020533859620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reaction.py>
            name: test_add_reaction
            obj: <function test_add_reaction at 0x0000020533859300>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002053360C290>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_add_reaction>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_reaction.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_add_reaction> [collection]
      pytest_itemcollected [hook]
          item: <Function test_add_reaction>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_reaction.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests' lenresult=15 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x000002052DCD5940>
          items: [<Function test_start_handler>, <Function test_generate_stub_mode>, <Function test_generate_mocked>, <Function test_backup_exists>, <Function test_save_confession>, <Coroutine test_handle_confession_text_valid>, <Function test_ai_confess_reply_enabled>, <Function test_ai_confess_reply_disabled>, <Function test_ai_confess_reply_default>, <Function test_build_context>, <Function test_system_prompt>, <Function test_generate_confession>, <Function test_db_connection>, <Function test_generate_digest>, <Function test_has_relevant_posts>, <Function test_dummy>, <Function test_extract_hashtags>, <Function test_migration>, <Function test_migrations>, <Function test_critical_services>, <Function test_backup_integrity>, <Function test_add_reaction>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x000002052DCD5940>
            items: [<Function test_start_handler>, <Function test_generate_stub_mode>, <Function test_generate_mocked>, <Function test_backup_exists>, <Function test_save_confession>, <Coroutine test_handle_confession_text_valid>, <Function test_ai_confess_reply_enabled>, <Function test_ai_confess_reply_disabled>, <Function test_ai_confess_reply_default>, <Function test_build_context>, <Function test_system_prompt>, <Function test_generate_confession>, <Function test_db_connection>, <Function test_generate_digest>, <Function test_has_relevant_posts>, <Function test_dummy>, <Function test_extract_hashtags>, <Function test_migration>, <Function test_migrations>, <Function test_critical_services>, <Function test_backup_integrity>, <Function test_add_reaction>]
            start_path: C:\Users\Mad_Dog\Desktop\shit_happens
            startdir: C:\Users\Mad_Dog\Desktop\shit_happens
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=22>
      pytest_runtest_protocol [hook]
          item: <Function test_start_handler>
          nextitem: <Function test_generate_stub_mode>
        pytest_runtest_logstart [hook]
            nodeid: tests/telegram/test_start_handler.py::test_start_handler
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\telegram\\test_start_handler.py', 0, 'test_start_handler')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_start_handler>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop_policy' scope='session' baseid=''>
              request: <SubRequest 'event_loop_policy' for <Function test_start_handler>>
          finish pytest_fixture_setup --> <asyncio.windows_events.WindowsProactorEventLoopPolicy object at 0x0000020533837770> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='app' scope='function' baseid='tests'>
              request: <SubRequest 'app' for <Function test_start_handler>>
          finish pytest_fixture_setup --> <Flask 'app'> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests'>
              request: <SubRequest 'client' for <Function test_start_handler>>
          early skip of rewriting module: flask.testing [assertion]
          early skip of rewriting module: click.testing [assertion]
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_start_handler>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_start_handler>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_start_handler>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_start_handler>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_start_handler>
            nextitem: <Function test_generate_stub_mode>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests'>
              request: <SubRequest 'client' for <Function test_start_handler>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests'>
              request: <SubRequest 'client' for <Function test_start_handler>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='app' scope='function' baseid='tests'>
              request: <SubRequest 'app' for <Function test_start_handler>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_start_handler>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/telegram/test_start_handler.py::test_start_handler' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/telegram/test_start_handler.py::test_start_handler
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\telegram\\test_start_handler.py', 0, 'test_start_handler')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_stub_mode>
          nextitem: <Function test_generate_mocked>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_ai_client.py::test_generate_stub_mode
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_ai_client.py', 5, 'test_generate_stub_mode')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_stub_mode>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_generate_stub_mode>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x0000020533818E90> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_stub_mode>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_stub_mode>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_stub_mode>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_stub_mode>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_stub_mode>
            nextitem: <Function test_generate_mocked>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_generate_stub_mode>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_stub_mode>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_ai_client.py::test_generate_stub_mode' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_ai_client.py::test_generate_stub_mode
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_ai_client.py', 5, 'test_generate_stub_mode')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_mocked>
          nextitem: <Function test_backup_exists>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_ai_client.py::test_generate_mocked
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_ai_client.py', 21, 'test_generate_mocked')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_mocked>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_generate_mocked>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x0000020532AA9940> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_mocked>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_mocked>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_mocked>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_mocked>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_mocked>
            nextitem: <Function test_backup_exists>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_generate_mocked>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_mocked>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_ai_client.py::test_generate_mocked' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_ai_client.py::test_generate_mocked
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_ai_client.py', 21, 'test_generate_mocked')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_backup_exists>
          nextitem: <Function test_save_confession>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_backup.py::test_backup_exists
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_backup.py', 0, 'test_backup_exists')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_backup_exists>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_backup_exists>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_backup.py::test_backup_exists' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_backup.py::test_backup_exists' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_backup.py::test_backup_exists' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_backup_exists>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_backup_exists>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_backup_exists>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_backup.py::test_backup_exists' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_backup.py::test_backup_exists' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_backup.py::test_backup_exists' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_backup_exists>
            nextitem: <Function test_save_confession>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_backup_exists>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_backup.py::test_backup_exists' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_backup.py::test_backup_exists' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_backup.py::test_backup_exists' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_backup.py::test_backup_exists
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_backup.py', 0, 'test_backup_exists')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_save_confession>
          nextitem: <Coroutine test_handle_confession_text_valid>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_confess.py::test_save_confession
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_confess.py', 4, 'test_save_confession')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_save_confession>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_save_confession>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_confess.py::test_save_confession' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_confess.py::test_save_confession' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_confess.py::test_save_confession' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_save_confession>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_save_confession>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_save_confession>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_confess.py::test_save_confession' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_confess.py::test_save_confession' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_confess.py::test_save_confession' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_save_confession>
            nextitem: <Coroutine test_handle_confession_text_valid>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_save_confession>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_confess.py::test_save_confession' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_confess.py::test_save_confession' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_confess.py::test_save_confession' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_confess.py::test_save_confession
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_confess.py', 4, 'test_save_confession')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Coroutine test_handle_confession_text_valid>
          nextitem: <Function test_ai_confess_reply_enabled>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_confess_handler.py::test_handle_confession_text_valid
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_confess_handler.py', 8, 'test_handle_confession_text_valid')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Coroutine test_handle_confession_text_valid>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Coroutine test_handle_confession_text_valid>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x00000205338685F0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_function_scoped_runner' scope='function' baseid=''>
              request: <SubRequest '_function_scoped_runner' for <Coroutine test_handle_confession_text_valid>>
          finish pytest_fixture_setup --> <asyncio.runners.Runner object at 0x0000020533864050> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Coroutine test_handle_confession_text_valid>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Coroutine test_handle_confession_text_valid>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Coroutine test_handle_confession_text_valid>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Coroutine test_handle_confession_text_valid>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Coroutine test_handle_confession_text_valid>
            nextitem: <Function test_ai_confess_reply_enabled>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_function_scoped_runner' scope='function' baseid=''>
              request: <SubRequest '_function_scoped_runner' for <Coroutine test_handle_confession_text_valid>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Coroutine test_handle_confession_text_valid>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Coroutine test_handle_confession_text_valid>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_confess_handler.py::test_handle_confession_text_valid' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_confess_handler.py::test_handle_confession_text_valid
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_confess_handler.py', 8, 'test_handle_confession_text_valid')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ai_confess_reply_enabled>
          nextitem: <Function test_ai_confess_reply_disabled>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_config_flags.py::test_ai_confess_reply_enabled
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_config_flags.py', 7, 'test_ai_confess_reply_enabled')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ai_confess_reply_enabled>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_ai_confess_reply_enabled>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x00000205337C3BD0> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_enabled>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ai_confess_reply_enabled>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ai_confess_reply_enabled>
          early skip of rewriting module: config.config [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_enabled>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ai_confess_reply_enabled>
            nextitem: <Function test_ai_confess_reply_disabled>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_ai_confess_reply_enabled>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_enabled>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_enabled' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_config_flags.py::test_ai_confess_reply_enabled
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_config_flags.py', 7, 'test_ai_confess_reply_enabled')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ai_confess_reply_disabled>
          nextitem: <Function test_ai_confess_reply_default>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_config_flags.py::test_ai_confess_reply_disabled
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_config_flags.py', 12, 'test_ai_confess_reply_disabled')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ai_confess_reply_disabled>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_ai_confess_reply_disabled>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x00000205337FE650> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_disabled>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ai_confess_reply_disabled>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ai_confess_reply_disabled>
          early skip of rewriting module: config.config [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_disabled>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ai_confess_reply_disabled>
            nextitem: <Function test_ai_confess_reply_default>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_ai_confess_reply_disabled>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_disabled>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_disabled' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_config_flags.py::test_ai_confess_reply_disabled
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_config_flags.py', 12, 'test_ai_confess_reply_disabled')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ai_confess_reply_default>
          nextitem: <Function test_build_context>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_config_flags.py::test_ai_confess_reply_default
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_config_flags.py', 17, 'test_ai_confess_reply_default')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ai_confess_reply_default>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_ai_confess_reply_default>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x00000205337FE550> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_default>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ai_confess_reply_default>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ai_confess_reply_default>
          early skip of rewriting module: config.config [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_default>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ai_confess_reply_default>
            nextitem: <Function test_build_context>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_ai_confess_reply_default>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ai_confess_reply_default>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flags.py::test_ai_confess_reply_default' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_config_flags.py::test_ai_confess_reply_default
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_config_flags.py', 17, 'test_ai_confess_reply_default')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_build_context>
          nextitem: <Function test_system_prompt>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_context.py::test_build_context
            location: ('tests\\test_context.py', 63, 'test_build_context')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_build_context>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='setup_test_db' scope='module' baseid='tests/test_context.py'>
              request: <SubRequest 'setup_test_db' for <Function test_build_context>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_context>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_build_context' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_build_context' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_build_context' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_build_context>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_build_context>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_context>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_build_context' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_build_context' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_build_context' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_build_context>
            nextitem: <Function test_system_prompt>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_context>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_build_context' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_build_context' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_build_context' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_context.py::test_build_context
            location: ('tests\\test_context.py', 63, 'test_build_context')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_system_prompt>
          nextitem: <Function test_generate_confession>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_context.py::test_system_prompt
            location: ('tests\\test_context.py', 81, 'test_system_prompt')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_system_prompt>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_system_prompt>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_system_prompt' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_system_prompt' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_system_prompt' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_system_prompt>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_system_prompt>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_system_prompt>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_system_prompt' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_system_prompt' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_system_prompt' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_system_prompt>
            nextitem: <Function test_generate_confession>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_system_prompt>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_system_prompt' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_system_prompt' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_system_prompt' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_context.py::test_system_prompt
            location: ('tests\\test_context.py', 81, 'test_system_prompt')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_confession>
          nextitem: <Function test_db_connection>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_context.py::test_generate_confession
            location: ('tests\\test_context.py', 93, 'test_generate_confession')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_confession>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_confession>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_generate_confession' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_generate_confession' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_generate_confession' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_confession>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_confession>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_confession>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_generate_confession' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_generate_confession' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_generate_confession' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_confession>
            nextitem: <Function test_db_connection>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='setup_test_db' scope='module' baseid='tests/test_context.py'>
              request: <SubRequest 'setup_test_db' for <Function test_build_context>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_confession>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_context.py::test_generate_confession' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_context.py::test_generate_confession' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_context.py::test_generate_confession' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_context.py::test_generate_confession
            location: ('tests\\test_context.py', 93, 'test_generate_confession')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_db_connection>
          nextitem: <Function test_generate_digest>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_db.py::test_db_connection
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_db.py', 4, 'test_db_connection')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_db_connection>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_db_connection>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_db.py::test_db_connection' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_db.py::test_db_connection' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_db.py::test_db_connection' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_db_connection>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_db_connection>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_db_connection>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_db.py::test_db_connection' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_db.py::test_db_connection' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_db.py::test_db_connection' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_db_connection>
            nextitem: <Function test_generate_digest>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_db_connection>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_db.py::test_db_connection' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_db.py::test_db_connection' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_db.py::test_db_connection' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_db.py::test_db_connection
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_db.py', 4, 'test_db_connection')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_digest>
          nextitem: <Function test_has_relevant_posts>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_digest.py::test_generate_digest
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_digest.py', 0, 'test_generate_digest')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_digest>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_digest>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_digest.py::test_generate_digest' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_digest.py::test_generate_digest' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_digest.py::test_generate_digest' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_digest>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_digest>
          early skip of rewriting module: app.services.digest_service [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_digest>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_digest.py::test_generate_digest' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_digest.py::test_generate_digest' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_digest.py::test_generate_digest' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_digest>
            nextitem: <Function test_has_relevant_posts>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_digest>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_digest.py::test_generate_digest' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_digest.py::test_generate_digest' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_digest.py::test_generate_digest' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_digest.py::test_generate_digest
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_digest.py', 0, 'test_generate_digest')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_has_relevant_posts>
          nextitem: <Function test_dummy>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_digest.py::test_has_relevant_posts
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_digest.py', 6, 'test_has_relevant_posts')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_has_relevant_posts>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_has_relevant_posts>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_has_relevant_posts>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_has_relevant_posts>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_has_relevant_posts>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_has_relevant_posts>
            nextitem: <Function test_dummy>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_has_relevant_posts>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_digest.py::test_has_relevant_posts' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_digest.py::test_has_relevant_posts
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_digest.py', 6, 'test_has_relevant_posts')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dummy>
          nextitem: <Function test_extract_hashtags>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_dummy.py::test_dummy
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_dummy.py', 0, 'test_dummy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dummy>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dummy>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_dummy.py::test_dummy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_dummy.py::test_dummy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_dummy.py::test_dummy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dummy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dummy>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dummy>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_dummy.py::test_dummy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_dummy.py::test_dummy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_dummy.py::test_dummy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dummy>
            nextitem: <Function test_extract_hashtags>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dummy>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_dummy.py::test_dummy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_dummy.py::test_dummy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_dummy.py::test_dummy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_dummy.py::test_dummy
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_dummy.py', 0, 'test_dummy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_hashtags>
          nextitem: <Function test_migration>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_hashtag.py::test_extract_hashtags
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_hashtag.py', 0, 'test_extract_hashtags')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_hashtags>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_hashtags>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_hashtags>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_hashtags>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_hashtags>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_hashtags>
            nextitem: <Function test_migration>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_hashtags>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_hashtag.py::test_extract_hashtags' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_hashtag.py::test_extract_hashtags
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_hashtag.py', 0, 'test_extract_hashtags')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_migration>
          nextitem: <Function test_migrations>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_migration.py::test_migration
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_migration.py', 0, 'test_migration')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_migration>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_migration>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_migration.py::test_migration' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_migration.py::test_migration' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_migration.py::test_migration' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_migration>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_migration>
          early skip of rewriting module: encodings.cp1251 [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_migration>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_migration.py::test_migration' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_migration.py::test_migration' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_migration.py::test_migration' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_migration>
            nextitem: <Function test_migrations>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_migration>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_migration.py::test_migration' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_migration.py::test_migration' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_migration.py::test_migration' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_migration.py::test_migration
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_migration.py', 0, 'test_migration')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_migrations>
          nextitem: <Function test_critical_services>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_production.py::test_migrations
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_production.py', 6, 'test_migrations')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_migrations>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_migrations>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_migrations' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_migrations' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_migrations' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_migrations>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_migrations>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_migrations>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_migrations' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_migrations' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_migrations' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_migrations>
            nextitem: <Function test_critical_services>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_migrations>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_migrations' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_migrations' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_migrations' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_production.py::test_migrations
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_production.py', 6, 'test_migrations')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_critical_services>
          nextitem: <Function test_backup_integrity>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_production.py::test_critical_services
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_production.py', 14, 'test_critical_services')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_critical_services>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_critical_services>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_critical_services' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_critical_services' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_critical_services' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_critical_services>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_critical_services>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_critical_services>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_critical_services' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_critical_services' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_critical_services' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_critical_services>
            nextitem: <Function test_backup_integrity>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_critical_services>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_critical_services' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_critical_services' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_critical_services' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_production.py::test_critical_services
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_production.py', 14, 'test_critical_services')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_backup_integrity>
          nextitem: <Function test_add_reaction>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_production.py::test_backup_integrity
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_production.py', 24, 'test_backup_integrity')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_backup_integrity>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_backup_integrity>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_backup_integrity' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_backup_integrity' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_backup_integrity' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_backup_integrity>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_backup_integrity>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_backup_integrity>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_backup_integrity' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_backup_integrity' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_backup_integrity' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_backup_integrity>
            nextitem: <Function test_add_reaction>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_backup_integrity>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_production.py::test_backup_integrity' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_production.py::test_backup_integrity' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_production.py::test_backup_integrity' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_production.py::test_backup_integrity
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_production.py', 24, 'test_backup_integrity')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_add_reaction>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/test_reaction.py::test_add_reaction
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_reaction.py', 4, 'test_add_reaction')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_add_reaction>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_add_reaction>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_reaction.py::test_add_reaction' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_reaction.py::test_add_reaction' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_reaction.py::test_add_reaction' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_add_reaction>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_add_reaction>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_add_reaction>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_reaction.py::test_add_reaction' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_reaction.py::test_add_reaction' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_reaction.py::test_add_reaction' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_add_reaction>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_function_scoped_runner' scope='function' baseid=''>
              request: <SubRequest '_function_scoped_runner' for <Coroutine test_handle_confession_text_valid>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop_policy' scope='session' baseid=''>
              request: <SubRequest 'event_loop_policy' for <Function test_start_handler>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_add_reaction>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_reaction.py::test_add_reaction' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_reaction.py::test_add_reaction' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_reaction.py::test_add_reaction' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002052DCD5940>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_reaction.py::test_add_reaction
            location: ('..\\Проекты\\Хуйня Случается\\shit_happens\\tests\\test_reaction.py', 4, 'test_add_reaction')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=0 testsfailed=0 testscollected=22>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x000002053141C590>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x000002052DCD5940>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x000002052DCD5940>
    finish pytest_unconfigure --> [] [hook]
